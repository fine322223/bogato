# bot.py
import asyncio
import json
import logging
import os
from pathlib import Path

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import WebAppInfo, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ ID –≥—Ä—É–ø–ø—ã –¥–ª—è –∑–∞–∫–∞–∑–æ–≤
API_TOKEN = "7957824215:AAFXeeA8H7ElTOEAW5NGilydtwQkPFcMBu8"
GROUP_ID = -1003062619878  # ID –≥—Ä—É–ø–ø—ã –ø—Ä–æ–¥–∞–≤—Ü–∞
ADMIN_ID = 5186803258  # !!! –í–ê–ñ–ù–û: –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à Telegram ID (—É–∑–Ω–∞—Ç—å –º–æ–∂–Ω–æ —É @userinfobot)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
storage = MemoryStorage()
bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=storage)

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å —Ç–æ–≤–∞—Ä–∞–º–∏
PRODUCTS_FILE = Path(__file__).parent / "products.json"
PROJECT_DIR = Path(__file__).parent.absolute()  # –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–æ–º —Ç–æ–≤–∞—Ä–æ–≤
def load_products_from_file():
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    try:
        if PRODUCTS_FILE.exists():
            with open(PRODUCTS_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        return []
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤: {e}")
        return []

def save_products_to_file(products):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –≤ JSON —Ñ–∞–π–ª"""
    try:
        with open(PRODUCTS_FILE, 'w', encoding='utf-8') as f:
            json.dump(products, f, ensure_ascii=False, indent=2)
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø—É—à –Ω–∞ GitHub
        try:
            import subprocess
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
            project_path = str(PROJECT_DIR)
            
            result = subprocess.run(['git', 'add', 'products.json'], 
                          cwd=project_path, 
                          capture_output=True, text=True)
            
            result = subprocess.run(['git', 'commit', '-m', '–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤'], 
                          cwd=project_path,
                          capture_output=True, text=True)
            
            result = subprocess.run(['git', 'push'], 
                          cwd=project_path,
                          capture_output=True, text=True)
            
            if result.returncode == 0:
                logging.info("‚úÖ –¢–æ–≤–∞—Ä—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –Ω–∞ GitHub! –ü–æ—è–≤—è—Ç—Å—è –Ω–∞ —Å–∞–π—Ç–µ —á–µ—Ä–µ–∑ 2-3 –º–∏–Ω—É—Ç—ã.")
            else:
                logging.warning(f"–û—à–∏–±–∫–∞ git push: {result.stderr}")
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞ GitHub: {e}")
        
        return True
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤: {e}")
        return False

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
products = load_products_from_file()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
class AddProduct(StatesGroup):
    name = State()
    price = State()
    image = State()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
class EditProduct(StatesGroup):
    select_product = State()
    edit_field = State()
    new_value = State()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def user_menu():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="üëú –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω",
            web_app=WebAppInfo(url="https://fine322223.github.io/bogato/")
        )],
        [InlineKeyboardButton(
            text="üìû –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞",
            url="https://t.me/fine911"
        )]
    ])
    return keyboard

# –ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
def admin_menu():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="üëú –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω",
            web_app=WebAppInfo(url="https://fine322223.github.io/bogato/")
        )],
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="add_product")],
        [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä", callback_data="edit_product")],
        [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="delete_product")],
        [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤", callback_data="list_products")],
        [InlineKeyboardButton(
            text="üìû –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞",
            url="https://t.me/fine911"
        )]
    ])
    return keyboard


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id == ADMIN_ID:
        await message.answer(
            "üëã –ü—Ä–∏–≤–µ—Ç, –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!\n\n"
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–æ–º Bogato Boutique.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏.",
            reply_markup=admin_menu()
        )
    else:
        await message.answer(
            "üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n\n"
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Bogato Boutique - –º–∞–≥–∞–∑–∏–Ω –ø—Ä–µ–º–∏–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.",
            reply_markup=user_menu()
        )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –∏–∑ WebApp
@dp.message(F.content_type == types.ContentType.WEB_APP_DATA)
async def handle_webapp_data(message: types.Message):
    import time
    start_time = time.time()
    logging.info(f"üîî –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ WebApp –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        data = json.loads(message.web_app_data.data)
        logging.info(f"üì¶ –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞: {data}")
        parse_time = time.time()
        logging.info(f"‚è± –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–Ω—è–ª: {(parse_time - start_time)*1000:.0f}ms")
        
        name = data.get("name")
        phone = data.get("phone")
        address = data.get("address")
        telegram = data.get("telegram")
        cart = data.get("cart", [])

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞
        order_text = (
            f"üì¶ <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑</b>\n\n"
            f"üë§ <b>–ò–º—è:</b> {name}\n"
            f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {phone}\n"
            f"üìç <b>–ê–¥—Ä–µ—Å:</b> {address}\n"
            f"üí¨ <b>Telegram:</b> {telegram}\n\n"
            f"üõí <b>–¢–æ–≤–∞—Ä—ã:</b>\n"
        )
        
        total = 0
        for item in cart:
            order_text += f"‚Ä¢ {item['title']} - {item['price']} ‚ÇΩ\n"
            total += item['price']
        
        order_text += f"\nüí∞ <b>–ò—Ç–æ–≥–æ:</b> {total} ‚ÇΩ"
        format_time = time.time()
        logging.info(f"‚è± –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞: {(format_time - parse_time)*1000:.0f}ms")

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é (–°–†–ê–ó–£!)
        user_id = message.from_user.id
        if user_id == ADMIN_ID:
            await message.answer(
                "‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!",
                reply_markup=admin_menu()
            )
        else:
            await message.answer(
                "‚úÖ –í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n"
                "–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
                reply_markup=user_menu()
            )
        answer_time = time.time()
        logging.info(f"‚è± –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {(answer_time - format_time)*1000:.0f}ms")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ –≥—Ä—É–ø–ø—É –ø—Ä–æ–¥–∞–≤—Ü–∞ (–≤ —Ñ–æ–Ω–µ)
        try:
            await bot.send_message(GROUP_ID, order_text, parse_mode="HTML")
            group_time = time.time()
            logging.info(f"‚úÖ –ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É –∑–∞ {(group_time - answer_time)*1000:.0f}ms")
            logging.info(f"‚è± –û–ë–©–ï–ï –í–†–ï–ú–Ø: {(group_time - start_time)*1000:.0f}ms")
        except Exception as group_error:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É: {group_error}")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞: {e}")
        user_id = message.from_user.id
        menu = admin_menu() if user_id == ADMIN_ID else user_menu()
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=menu
        )


# ============= –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–ò–í–ù–´–ï –§–£–ù–ö–¶–ò–ò =============

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ - —à–∞–≥ 1: –∑–∞–ø—Ä–æ—Å –Ω–∞–∑–≤–∞–Ω–∏—è
@dp.callback_query(F.data == "add_product")
async def add_product_start(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    if user_id != ADMIN_ID:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
    await state.set_state(AddProduct.name)
    await callback.answer()

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ - —à–∞–≥ 2: –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è, –∑–∞–ø—Ä–æ—Å —Ü–µ–Ω—ã
@dp.message(AddProduct.name)
async def add_product_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):")
    await state.set_state(AddProduct.price)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ - —à–∞–≥ 3: –ø–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã, –∑–∞–ø—Ä–æ—Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
@dp.message(AddProduct.price)
async def add_product_price(message: types.Message, state: FSMContext):
    try:
        price = float(message.text)
        await state.update_data(price=price)
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ (–∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):")
        await state.set_state(AddProduct.image)
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ - —à–∞–≥ 4: –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
@dp.message(AddProduct.image)
async def add_product_image(message: types.Message, state: FSMContext):
    image_url = message.text if message.text.lower() != '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å' else ''
    await state.update_data(image=image_url)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä
    new_product = {
        'id': str(len(products) + 1),
        'name': data['name'],
        'price': data['price'],
        'image': data['image']
    }
    
    products.append(new_product)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    if save_products_to_file(products):
        await message.answer(
            f"‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω:\n\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {new_product['name']}\n"
            f"–¶–µ–Ω–∞: {new_product['price']} ‚ÇΩ\n"
            f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {'–î–∞' if new_product['image'] else '–ù–µ—Ç'}\n\n"
            f"–¢–æ–≤–∞—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—è–≤–∏—Ç—Å—è –≤ –º–∞–≥–∞–∑–∏–Ω–µ!",
            reply_markup=admin_menu()
        )
    else:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞",
            reply_markup=admin_menu()
        )
    
    await state.clear()

# –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
@dp.callback_query(F.data == "list_products")
async def list_products(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if user_id != ADMIN_ID:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    if not products:
        await callback.message.answer("üìã –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç", reply_markup=admin_menu())
        await callback.answer()
        return
    
    text = "üìã <b>–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:</b>\n\n"
    for p in products:
        text += f"ID: {p['id']}\n"
        text += f"‚Ä¢ {p['name']} - {p['price']} ‚ÇΩ\n\n"
    
    await callback.message.answer(text, parse_mode="HTML", reply_markup=admin_menu())
    await callback.answer()

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ - —à–∞–≥ 1: –≤—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–∞
@dp.callback_query(F.data == "edit_product")
async def edit_product_start(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    if user_id != ADMIN_ID:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    if not products:
        await callback.message.answer("‚ùå –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", reply_markup=admin_menu())
        await callback.answer()
        return
    
    text = "üìã –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–≤–≤–µ–¥–∏—Ç–µ ID):\n\n"
    for p in products:
        text += f"ID: {p['id']} - {p['name']}\n"
    
    await callback.message.answer(text)
    await state.set_state(EditProduct.select_product)
    await callback.answer()

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ - —à–∞–≥ 2: –ø–æ–ª—É—á–µ–Ω–∏–µ ID
@dp.message(EditProduct.select_product)
async def edit_product_select(message: types.Message, state: FSMContext):
    product_id = message.text
    product = next((p for p in products if p['id'] == product_id), None)
    
    if not product:
        await message.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    await state.update_data(product_id=product_id)
    await message.answer(
        f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: {product['name']}\n\n"
        f"–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?\n"
        f"1 - –ù–∞–∑–≤–∞–Ω–∏–µ\n"
        f"2 - –¶–µ–Ω–∞\n"
        f"3 - –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
    )
    await state.set_state(EditProduct.edit_field)

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ - —à–∞–≥ 3: –≤—ã–±–æ—Ä –ø–æ–ª—è
@dp.message(EditProduct.edit_field)
async def edit_product_field(message: types.Message, state: FSMContext):
    field = message.text
    
    if field not in ['1', '2', '3']:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –í–≤–µ–¥–∏—Ç–µ 1, 2 –∏–ª–∏ 3:")
        return
    
    field_name = {'1': 'name', '2': 'price', '3': 'image'}[field]
    await state.update_data(field=field_name)
    
    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:")
    await state.set_state(EditProduct.new_value)

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ - —à–∞–≥ 4: –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
@dp.message(EditProduct.new_value)
async def edit_product_value(message: types.Message, state: FSMContext):
    data = await state.get_data()
    product_id = data['product_id']
    field = data['field']
    new_value = message.text
    
    product = next((p for p in products if p['id'] == product_id), None)
    
    if field == 'price':
        try:
            new_value = float(new_value)
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
    
    product[field] = new_value
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª
    if save_products_to_file(products):
        await message.answer(
            f"‚úÖ –¢–æ–≤–∞—Ä –æ–±–Ω–æ–≤–ª–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω:\n\n"
            f"ID: {product['id']}\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {product['name']}\n"
            f"–¶–µ–Ω–∞: {product['price']} ‚ÇΩ\n"
            f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {'–î–∞' if product['image'] else '–ù–µ—Ç'}",
            reply_markup=admin_menu()
        )
    else:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π",
            reply_markup=admin_menu()
        )
    
    await state.clear()

# –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ - —à–∞–≥ 1: –≤—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–∞
@dp.callback_query(F.data == "delete_product")
async def delete_product_start(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    if user_id != ADMIN_ID:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    if not products:
        await callback.message.answer("‚ùå –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", reply_markup=admin_menu())
        await callback.answer()
        return
    
    text = "üóë –í–≤–µ–¥–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n"
    for p in products:
        text += f"ID: {p['id']} - {p['name']}\n"
    
    await callback.message.answer(text)
    await state.set_state("delete_product_id")
    await callback.answer()

# –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ - —à–∞–≥ 2: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ
@dp.message(F.text, lambda msg: msg.text.isdigit())
async def delete_product_confirm(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    
    if current_state != "delete_product_id":
        return
    
    product_id = message.text
    product = next((p for p in products if p['id'] == product_id), None)
    
    if not product:
        await message.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    products.remove(product)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª
    if save_products_to_file(products):
        await message.answer(
            f"‚úÖ –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:\n{product['name']}",
            reply_markup=admin_menu()
        )
    else:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π",
            reply_markup=admin_menu()
        )
    
    await state.clear()


# –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def debug_all_messages(message: types.Message):
    logging.info(f"üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: type={message.content_type}, from={message.from_user.id}")
    if message.web_app_data:
        logging.info(f"üåê WebApp –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç!")


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    asyncio.run(dp.start_polling(bot, skip_updates=True))
